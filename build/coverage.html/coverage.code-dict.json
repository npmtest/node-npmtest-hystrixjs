{"/home/travis/build/npmtest/node-npmtest-hystrixjs/test.js":"/* istanbul instrument in package npmtest_hystrixjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hystrixjs/lib.npmtest_hystrixjs.js":"/* istanbul instrument in package npmtest_hystrixjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hystrixjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hystrixjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hystrixjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hystrixjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hystrixjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hystrixjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hystrixjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hystrixjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hystrixjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hystrixjs.__dirname + '/lib.npmtest_hystrixjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/index.js":"module.exports = {\n   commandFactory: require(\"./lib/command/CommandFactory\"),\n   metricsFactory: require(\"./lib/metrics/CommandMetrics\").Factory,\n   circuitFactory: require(\"./lib/command/CircuitBreaker\"),\n   hystrixConfig: require(\"./lib/util/HystrixConfig\"),\n   hystrixSSEStream: require(\"./lib/http/HystrixSSEStream\")\n};","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/command/CommandFactory.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _metricsCommandMetrics = require(\"../metrics/CommandMetrics\");\n\nvar _CircuitBreaker = require(\"./CircuitBreaker\");\n\nvar _CircuitBreaker2 = _interopRequireDefault(_CircuitBreaker);\n\nvar _Command = require(\"./Command\");\n\nvar _Command2 = _interopRequireDefault(_Command);\n\nvar hystrixCommandsCache = new Map();\n\nvar CommandFactory = (function () {\n    function CommandFactory() {\n        _classCallCheck(this, CommandFactory);\n    }\n\n    _createClass(CommandFactory, null, [{\n        key: \"getOrCreate\",\n        value: function getOrCreate(commandKey, commandGroup) {\n            return new CommandBuilder(commandKey, commandGroup);\n        }\n    }, {\n        key: \"resetCache\",\n        value: function resetCache() {\n            hystrixCommandsCache.clear();\n        }\n    }]);\n\n    return CommandFactory;\n})();\n\nexports[\"default\"] = CommandFactory;\n\nvar CommandBuilder = (function () {\n    function CommandBuilder(commandKey) {\n        var commandGroup = arguments.length <= 1 || arguments[1] === undefined ? \"hystrix\" : arguments[1];\n\n        _classCallCheck(this, CommandBuilder);\n\n        this.commandKey = commandKey;\n        this.commandGroup = commandGroup;\n        this.config = {};\n    }\n\n    _createClass(CommandBuilder, [{\n        key: \"cleanup\",\n        value: function cleanup(value) {\n            this.config.cleanup = value;\n            return this;\n        }\n    }, {\n        key: \"circuitBreakerSleepWindowInMilliseconds\",\n        value: function circuitBreakerSleepWindowInMilliseconds(value) {\n            this.config.circuitBreakerSleepWindowInMilliseconds = value;\n            return this;\n        }\n    }, {\n        key: \"errorHandler\",\n        value: function errorHandler(value) {\n            this.config.isErrorHandler = value;\n            return this;\n        }\n    }, {\n        key: \"timeout\",\n        value: function timeout(value) {\n            this.config.timeout = value;\n            return this;\n        }\n    }, {\n        key: \"circuitBreakerRequestVolumeThreshold\",\n        value: function circuitBreakerRequestVolumeThreshold(value) {\n            this.config.circuitBreakerRequestVolumeThreshold = value;\n            return this;\n        }\n    }, {\n        key: \"requestVolumeRejectionThreshold\",\n        value: function requestVolumeRejectionThreshold(value) {\n            this.config.requestVolumeRejectionThreshold = value;\n            return this;\n        }\n    }, {\n        key: \"circuitBreakerForceOpened\",\n        value: function circuitBreakerForceOpened(value) {\n            this.config.circuitBreakerForceOpened = value;\n            return this;\n        }\n    }, {\n        key: \"circuitBreakerForceClosed\",\n        value: function circuitBreakerForceClosed(value) {\n            this.config.circuitBreakerForceClosed = value;\n            return this;\n        }\n    }, {\n        key: \"statisticalWindowNumberOfBuckets\",\n        value: function statisticalWindowNumberOfBuckets(value) {\n            this.config.statisticalWindowNumberOfBuckets = value;\n            return this;\n        }\n    }, {\n        key: \"statisticalWindowLength\",\n        value: function statisticalWindowLength(value) {\n            this.config.statisticalWindowLength = value;\n            return this;\n        }\n    }, {\n        key: \"percentileWindowNumberOfBuckets\",\n        value: function percentileWindowNumberOfBuckets(value) {\n            this.config.percentileWindowNumberOfBuckets = value;\n            return this;\n        }\n    }, {\n        key: \"percentileWindowLength\",\n        value: function percentileWindowLength(value) {\n            this.config.percentileWindowLength = value;\n            return this;\n        }\n    }, {\n        key: \"circuitBreakerErrorThresholdPercentage\",\n        value: function circuitBreakerErrorThresholdPercentage(value) {\n            this.config.circuitBreakerErrorThresholdPercentage = value;\n            return this;\n        }\n    }, {\n        key: \"run\",\n        value: function run(value) {\n            this.config.run = value;\n            return this;\n        }\n    }, {\n        key: \"context\",\n        value: function context(value) {\n            this.config.context = value;\n            return this;\n        }\n    }, {\n        key: \"fallbackTo\",\n        value: function fallbackTo(value) {\n            this.config.fallback = value;\n            return this;\n        }\n    }, {\n        key: \"build\",\n        value: function build() {\n\n            var previouslyCached = hystrixCommandsCache.get(this.commandKey);\n            if (previouslyCached) {\n                return previouslyCached;\n            }\n\n            var metricsConfig = {\n                commandKey: this.commandKey,\n                commandGroup: this.commandGroup,\n                statisticalWindowTimeInMilliSeconds: this.config.statisticalWindowLength,\n                statisticalWindowNumberOfBuckets: this.config.statisticalWindowNumberOfBuckets,\n                percentileWindowTimeInMilliSeconds: this.config.percentileWindowLength,\n                percentileWindowNumberOfBuckets: this.config.percentileWindowNumberOfBuckets\n            };\n            var circuitConfig = {\n                commandKey: this.commandKey,\n                commandGroup: this.commandGroup,\n                circuitBreakerSleepWindowInMilliseconds: this.config.circuitBreakerSleepWindowInMilliseconds,\n                circuitBreakerErrorThresholdPercentage: this.config.circuitBreakerErrorThresholdPercentage,\n                circuitBreakerRequestVolumeThreshold: this.config.circuitBreakerRequestVolumeThreshold,\n                circuitBreakerForceClosed: this.config.circuitBreakerForceClosed,\n                circuitBreakerForceOpened: this.config.circuitBreakerForceOpened\n            };\n            _metricsCommandMetrics.Factory.getOrCreate(metricsConfig);\n            _CircuitBreaker2[\"default\"].getOrCreate(circuitConfig);\n            var command = new _Command2[\"default\"]({\n                commandKey: this.commandKey,\n                commandGroup: this.commandGroup,\n                runContext: this.config.context,\n                timeout: this.config.timeout,\n                fallback: this.config.fallback,\n                run: this.config.run,\n                isErrorHandler: this.config.isErrorHandler,\n                metricsConfig: metricsConfig,\n                circuitConfig: circuitConfig,\n                requestVolumeRejectionThreshold: this.config.requestVolumeRejectionThreshold\n            });\n\n            hystrixCommandsCache.set(this.commandKey, command);\n            return hystrixCommandsCache.get(this.commandKey);\n        }\n    }]);\n\n    return CommandBuilder;\n})();\n\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/metrics/CommandMetrics.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _RollingNumber = require(\"./RollingNumber\");\n\nvar _RollingNumber2 = _interopRequireDefault(_RollingNumber);\n\nvar _RollingPercentile = require(\"./RollingPercentile\");\n\nvar _RollingPercentile2 = _interopRequireDefault(_RollingPercentile);\n\nvar _RollingNumberEvent = require(\"./RollingNumberEvent\");\n\nvar _RollingNumberEvent2 = _interopRequireDefault(_RollingNumberEvent);\n\nvar _utilActualTime = require(\"../util/ActualTime\");\n\nvar _utilActualTime2 = _interopRequireDefault(_utilActualTime);\n\nvar _utilHystrixConfig = require(\"../util/HystrixConfig\");\n\nvar _utilHystrixConfig2 = _interopRequireDefault(_utilHystrixConfig);\n\nvar CommandMetrics = (function () {\n    function CommandMetrics(commandKey) {\n        var commandGroup = arguments.length <= 1 || arguments[1] === undefined ? \"hystrix\" : arguments[1];\n\n        var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n        var _ref$statisticalWindowTimeInMilliSeconds = _ref.statisticalWindowTimeInMilliSeconds;\n        var statisticalWindowTimeInMilliSeconds = _ref$statisticalWindowTimeInMilliSeconds === undefined ? _utilHystrixConfig2[\"default\"].metricsStatisticalWindowInMilliseconds : _ref$statisticalWindowTimeInMilliSeconds;\n        var _ref$statisticalWindowNumberOfBuckets = _ref.statisticalWindowNumberOfBuckets;\n        var statisticalWindowNumberOfBuckets = _ref$statisticalWindowNumberOfBuckets === undefined ? _utilHystrixConfig2[\"default\"].metricsStatisticalWindowBuckets : _ref$statisticalWindowNumberOfBuckets;\n        var _ref$percentileWindowTimeInMilliSeconds = _ref.percentileWindowTimeInMilliSeconds;\n        var percentileWindowTimeInMilliSeconds = _ref$percentileWindowTimeInMilliSeconds === undefined ? _utilHystrixConfig2[\"default\"].metricsPercentileWindowInMilliseconds : _ref$percentileWindowTimeInMilliSeconds;\n        var _ref$percentileWindowNumberOfBuckets = _ref.percentileWindowNumberOfBuckets;\n        var percentileWindowNumberOfBuckets = _ref$percentileWindowNumberOfBuckets === undefined ? _utilHystrixConfig2[\"default\"].metricsPercentileWindowBuckets : _ref$percentileWindowNumberOfBuckets;\n\n        _classCallCheck(this, CommandMetrics);\n\n        if (!commandKey) {\n            throw new Error(\"Please provide a unique command key for the metrics.\");\n        }\n        this.currentExecutionCount = 0;\n        this.metricsRollingStatisticalWindowInMilliseconds = statisticalWindowTimeInMilliSeconds;\n        this.commandKey = commandKey;\n        this.commandGroup = commandGroup;\n        this.lastHealthCountsSnapshot = _utilActualTime2[\"default\"].getCurrentTime();\n        this.rollingCount = new _RollingNumber2[\"default\"]({\n            timeInMillisecond: statisticalWindowTimeInMilliSeconds,\n            numberOfBuckets: statisticalWindowNumberOfBuckets\n        });\n        this.percentileCount = new _RollingPercentile2[\"default\"]({\n            timeInMillisecond: percentileWindowTimeInMilliSeconds,\n            numberOfBuckets: percentileWindowNumberOfBuckets\n        });\n    }\n\n    _createClass(CommandMetrics, [{\n        key: \"markSuccess\",\n        value: function markSuccess() {\n            this.rollingCount.increment(_RollingNumberEvent2[\"default\"].SUCCESS);\n        }\n    }, {\n        key: \"markRejected\",\n        value: function markRejected() {\n            this.rollingCount.increment(_RollingNumberEvent2[\"default\"].REJECTED);\n        }\n    }, {\n        key: \"markFailure\",\n        value: function markFailure() {\n            this.rollingCount.increment(_RollingNumberEvent2[\"default\"].FAILURE);\n        }\n    }, {\n        key: \"markTimeout\",\n        value: function markTimeout() {\n            this.rollingCount.increment(_RollingNumberEvent2[\"default\"].TIMEOUT);\n        }\n    }, {\n        key: \"markShortCircuited\",\n        value: function markShortCircuited() {\n            this.rollingCount.increment(_RollingNumberEvent2[\"default\"].SHORT_CIRCUITED);\n        }\n    }, {\n        key: \"incrementExecutionCount\",\n        value: function incrementExecutionCount() {\n            ++this.currentExecutionCount;\n        }\n    }, {\n        key: \"decrementExecutionCount\",\n        value: function decrementExecutionCount() {\n            --this.currentExecutionCount;\n        }\n    }, {\n        key: \"getCurrentExecutionCount\",\n        value: function getCurrentExecutionCount() {\n            return this.currentExecutionCount;\n        }\n    }, {\n        key: \"addExecutionTime\",\n        value: function addExecutionTime(time) {\n            this.percentileCount.addValue(time);\n        }\n    }, {\n        key: \"getRollingCount\",\n        value: function getRollingCount(type) {\n            return this.rollingCount.getRollingSum(type);\n        }\n    }, {\n        key: \"getExecutionTime\",\n        value: function getExecutionTime(percentile) {\n            return this.percentileCount.getPercentile(percentile);\n        }\n    }, {\n        key: \"getHealthCounts\",\n        value: function getHealthCounts() {\n            //TODO restrict calculation by time to avoid too frequent calls\n            var success = this.rollingCount.getRollingSum(_RollingNumberEvent2[\"default\"].SUCCESS);\n            var error = this.rollingCount.getRollingSum(_RollingNumberEvent2[\"default\"].FAILURE);\n            var timeout = this.rollingCount.getRollingSum(_RollingNumberEvent2[\"default\"].TIMEOUT);\n            var shortCircuited = this.rollingCount.getRollingSum(_RollingNumberEvent2[\"default\"].SHORT_CIRCUITED);\n\n            var totalCount = success + error + timeout + shortCircuited;\n            var errorCount = error + timeout + shortCircuited;\n\n            var errorPercentage = 0;\n            if (totalCount > 0) {\n                errorPercentage = errorCount / totalCount * 100;\n            }\n\n            return {\n                totalCount: totalCount,\n                errorCount: errorCount,\n                errorPercentage: parseInt(errorPercentage)\n            };\n        }\n    }, {\n        key: \"reset\",\n        value: function reset() {\n            this.rollingCount.reset();\n            this.lastHealthCountsSnapshot = _utilActualTime2[\"default\"].getCurrentTime();\n        }\n    }]);\n\n    return CommandMetrics;\n})();\n\nexports.CommandMetrics = CommandMetrics;\n\nvar metricsByCommand = new Map();\n\nvar Factory = (function () {\n    function Factory() {\n        _classCallCheck(this, Factory);\n    }\n\n    _createClass(Factory, null, [{\n        key: \"getOrCreate\",\n        value: function getOrCreate() {\n            var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n            var commandKey = _ref2.commandKey;\n            var _ref2$commandGroup = _ref2.commandGroup;\n            var commandGroup = _ref2$commandGroup === undefined ? \"hystrix\" : _ref2$commandGroup;\n            var statisticalWindowTimeInMilliSeconds = _ref2.statisticalWindowTimeInMilliSeconds;\n            var statisticalWindowNumberOfBuckets = _ref2.statisticalWindowNumberOfBuckets;\n            var percentileWindowTimeInMilliSeconds = _ref2.percentileWindowTimeInMilliSeconds;\n            var percentileWindowNumberOfBuckets = _ref2.percentileWindowNumberOfBuckets;\n\n            var previouslyCached = metricsByCommand.get(commandKey);\n            if (previouslyCached) {\n                return previouslyCached;\n            }\n\n            var metrics = new CommandMetrics(commandKey, commandGroup, {\n                statisticalWindowTimeInMilliSeconds: statisticalWindowTimeInMilliSeconds,\n                statisticalWindowNumberOfBuckets: statisticalWindowNumberOfBuckets,\n                percentileWindowTimeInMilliSeconds: percentileWindowTimeInMilliSeconds,\n                percentileWindowNumberOfBuckets: percentileWindowNumberOfBuckets\n            });\n            metricsByCommand.set(commandKey, metrics);\n            return metricsByCommand.get(commandKey);\n        }\n    }, {\n        key: \"resetCache\",\n        value: function resetCache() {\n            metricsByCommand.clear();\n        }\n    }, {\n        key: \"getAllMetrics\",\n        value: function getAllMetrics() {\n            return metricsByCommand.values();\n        }\n    }]);\n\n    return Factory;\n})();\n\nexports.Factory = Factory;","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/metrics/RollingNumber.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _utilActualTime = require(\"../util/ActualTime\");\n\nvar _utilActualTime2 = _interopRequireDefault(_utilActualTime);\n\nvar _utilHystrixConfig = require(\"../util/HystrixConfig\");\n\nvar _utilHystrixConfig2 = _interopRequireDefault(_utilHystrixConfig);\n\nvar _CounterBucket = require(\"./CounterBucket\");\n\nvar _CounterBucket2 = _interopRequireDefault(_CounterBucket);\n\nvar RollingNumber = (function () {\n    function RollingNumber() {\n        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var _ref$timeInMillisecond = _ref.timeInMillisecond;\n        var timeInMillisecond = _ref$timeInMillisecond === undefined ? _utilHystrixConfig2[\"default\"].metricsStatisticalWindowInMilliseconds : _ref$timeInMillisecond;\n        var _ref$numberOfBuckets = _ref.numberOfBuckets;\n        var numberOfBuckets = _ref$numberOfBuckets === undefined ? _utilHystrixConfig2[\"default\"].metricsStatisticalWindowBuckets : _ref$numberOfBuckets;\n\n        _classCallCheck(this, RollingNumber);\n\n        this.windowLength = timeInMillisecond;\n        this.numberOfBuckets = numberOfBuckets;\n        this.buckets = [];\n    }\n\n    _createClass(RollingNumber, [{\n        key: \"increment\",\n        value: function increment(type) {\n            this.getCurrentBucket().increment(type);\n        }\n    }, {\n        key: \"getCurrentBucket\",\n        value: function getCurrentBucket() {\n            var currentTime = _utilActualTime2[\"default\"].getCurrentTime();\n\n            if (this.buckets.length === 0) {\n                var newBucket = new _CounterBucket2[\"default\"](currentTime);\n                this.buckets.push(newBucket);\n                return newBucket;\n            }\n\n            var currentBucket = this.buckets[this.buckets.length - 1];\n            if (currentTime > currentBucket.windowStart + this.windowLength) {\n                this.reset();\n                return this.getCurrentBucket();\n            }\n            if (currentTime < currentBucket.windowStart + this.bucketSizeInMilliseconds) {\n                return currentBucket;\n            } else {\n                this.rollWindow(currentTime);\n                return this.getCurrentBucket();\n            }\n        }\n    }, {\n        key: \"rollWindow\",\n        value: function rollWindow(currentTime) {\n            var newBucket = new _CounterBucket2[\"default\"](currentTime);\n            if (this.buckets.length == this.numberOfBuckets) {\n                this.buckets.shift();\n            }\n            this.buckets.push(newBucket);\n        }\n    }, {\n        key: \"getRollingSum\",\n        value: function getRollingSum(type) {\n            var sum = 0;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this.buckets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var bucket = _step.value;\n\n                    sum += bucket.get(type);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n                        _iterator[\"return\"]();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return sum;\n        }\n    }, {\n        key: \"reset\",\n        value: function reset() {\n            this.buckets = [];\n        }\n    }, {\n        key: \"bucketSizeInMilliseconds\",\n        get: function get() {\n            return this.windowLength / this.numberOfBuckets;\n        }\n    }]);\n\n    return RollingNumber;\n})();\n\nexports[\"default\"] = RollingNumber;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/util/ActualTime.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ActualTime = (function () {\n    function ActualTime() {\n        _classCallCheck(this, ActualTime);\n    }\n\n    _createClass(ActualTime, null, [{\n        key: \"getCurrentTime\",\n        value: function getCurrentTime() {\n            return Date.now();\n        }\n    }]);\n\n    return ActualTime;\n})();\n\nexports[\"default\"] = ActualTime;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/util/HystrixConfig.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar environment = process.env;\nvar customProperties = new Map();\n\nvar HystrixPropertiesNames = {\n    HYSTRIX_FORCE_CIRCUIT_OPEN: \"hystrix.force.circuit.open\",\n    HYSTRIX_FORCE_CIRCUIT_CLOSED: \"hystrix.force.circuit.closed\",\n    HYSTRIX_CIRCUIT_SLEEP_WINDOW_IN_MS: \"hystrix.circuit.sleepWindowInMilliseconds\",\n    HYSTRIX_CIRCUIT_ERROR_THRESHOLD_PERCENTAGE: \"hystrix.circuit.errorThresholdPercentage\",\n    HYSTRIX_CIRCUIT_VOLUME_THRESHOLD: \"hystrix.circuit.volumeThreshold\",\n    HYSTRIX_FORCE_OVERRIDE_CIRCUIT_VOLUME_THRESHOLD: \"hystrix.circuit.volumeThreshold.forceOverride\",\n    HYSTRIX_CIRCUIT_VOLUME_THRESHOLD_OVERRIDE: \"hystrix.circuit.volumeThreshold.override\",\n    HYSTRIX_REQUEST_VOLUME_REJECTION_THRESHOLD: \"hystrix.request.volume.rejectionThreshold\",\n    HYSTRIX_EXECUTION_TIMEOUT_IN_MS: \"hystrix.execution.timeoutInMilliseconds\",\n    HYSTRIX_METRICS_STATISTICAL_WINDOW_IN_MS: \"hystrix.metrics.statistical.window.timeInMilliseconds\",\n    HYSTRIX_METRICS_STATISTICAL_WINDOW_BUCKETS: \"hystrix.metrics.statistical.window.bucketsNumber\",\n    HYSTRIX_METRICS_PERCENTILE_WINDOW_IN_MS: \"hystrix.metrics.percentile.window.timeInMilliseconds\",\n    HYSTRIX_METRICS_PERCENTILE_WINDOW_BUCKETS: \"hystrix.metrics.percentile.window.bucketsNumber\",\n    HYSTRIX_PROMISE_IMPLEMENTATION: \"hystrix.promise.implementation\"\n};\n\nvar defaults = {\n    \"hystrix.force.circuit.open\": false,\n    \"hystrix.force.circuit.closed\": false,\n    \"hystrix.circuit.sleepWindowInMilliseconds\": 3000,\n    \"hystrix.circuit.errorThresholdPercentage\": 50,\n    \"hystrix.circuit.volumeThreshold\": 10,\n    \"hystrix.circuit.volumeThreshold.forceOverride\": false,\n    \"hystrix.circuit.volumeThreshold.override\": 20,\n    \"hystrix.execution.timeoutInMilliseconds\": 30000,\n    \"hystrix.metrics.statistical.window.timeInMilliseconds\": 10000,\n    \"hystrix.metrics.statistical.window.bucketsNumber\": 10,\n    \"hystrix.metrics.percentile.window.timeInMilliseconds\": 10000,\n    \"hystrix.metrics.percentile.window.bucketsNumber\": 10,\n    \"hystrix.request.volume.rejectionThreshold\": 0,\n    \"hystrix.promise.implementation\": Promise\n};\n\nvar HystrixConfig = (function () {\n    function HystrixConfig() {\n        _classCallCheck(this, HystrixConfig);\n    }\n\n    _createClass(HystrixConfig, null, [{\n        key: \"resetProperties\",\n        value: function resetProperties() {\n            customProperties.clear();\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_ERROR_THRESHOLD_PERCENTAGE] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_CIRCUIT_ERROR_THRESHOLD_PERCENTAGE, properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_ERROR_THRESHOLD_PERCENTAGE]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_SLEEP_WINDOW_IN_MS] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_CIRCUIT_SLEEP_WINDOW_IN_MS, properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_SLEEP_WINDOW_IN_MS]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD, properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD_OVERRIDE] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD_OVERRIDE, properties[HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD_OVERRIDE]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_FORCE_OVERRIDE_CIRCUIT_VOLUME_THRESHOLD] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_FORCE_OVERRIDE_CIRCUIT_VOLUME_THRESHOLD, properties[HystrixPropertiesNames.HYSTRIX_FORCE_OVERRIDE_CIRCUIT_VOLUME_THRESHOLD]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_EXECUTION_TIMEOUT_IN_MS] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_EXECUTION_TIMEOUT_IN_MS, properties[HystrixPropertiesNames.HYSTRIX_EXECUTION_TIMEOUT_IN_MS]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_CLOSED] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_CLOSED, properties[HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_CLOSED]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_OPEN] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_OPEN, properties[HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_OPEN]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_BUCKETS] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_BUCKETS, properties[HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_BUCKETS]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_IN_MS] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_IN_MS, properties[HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_IN_MS]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_BUCKETS] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_BUCKETS, properties[HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_BUCKETS]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_IN_MS] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_IN_MS, properties[HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_IN_MS]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_REQUEST_VOLUME_REJECTION_THRESHOLD] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_REQUEST_VOLUME_REJECTION_THRESHOLD, properties[HystrixPropertiesNames.HYSTRIX_REQUEST_VOLUME_REJECTION_THRESHOLD]);\n            }\n\n            if (properties[HystrixPropertiesNames.HYSTRIX_PROMISE_IMPLEMENTATION] != undefined) {\n                customProperties.set(HystrixPropertiesNames.HYSTRIX_PROMISE_IMPLEMENTATION, properties[HystrixPropertiesNames.HYSTRIX_PROMISE_IMPLEMENTATION]);\n            }\n        }\n    }, {\n        key: \"metricsPercentileWindowBuckets\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_BUCKETS);\n        }\n    }, {\n        key: \"circuitBreakerForceClosed\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_CLOSED);\n        }\n    }, {\n        key: \"circuitBreakerForceOpened\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_FORCE_CIRCUIT_OPEN);\n        }\n    }, {\n        key: \"circuitBreakerSleepWindowInMilliseconds\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_CIRCUIT_SLEEP_WINDOW_IN_MS);\n        }\n    }, {\n        key: \"circuitBreakerErrorThresholdPercentage\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_CIRCUIT_ERROR_THRESHOLD_PERCENTAGE);\n        }\n    }, {\n        key: \"circuitBreakerRequestVolumeThreshold\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD);\n        }\n    }, {\n        key: \"circuitBreakerRequestVolumeThresholdForceOverride\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_FORCE_OVERRIDE_CIRCUIT_VOLUME_THRESHOLD);\n        }\n    }, {\n        key: \"circuitBreakerRequestVolumeThresholdOverride\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_CIRCUIT_VOLUME_THRESHOLD_OVERRIDE);\n        }\n    }, {\n        key: \"executionTimeoutInMilliseconds\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_EXECUTION_TIMEOUT_IN_MS);\n        }\n    }, {\n        key: \"metricsStatisticalWindowBuckets\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_BUCKETS);\n        }\n    }, {\n        key: \"metricsStatisticalWindowInMilliseconds\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_METRICS_STATISTICAL_WINDOW_IN_MS);\n        }\n    }, {\n        key: \"metricsPercentileWindowInMilliseconds\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_METRICS_PERCENTILE_WINDOW_IN_MS);\n        }\n    }, {\n        key: \"requestVolumeRejectionThreshold\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_REQUEST_VOLUME_REJECTION_THRESHOLD);\n        }\n    }, {\n        key: \"promiseImplementation\",\n        get: function get() {\n            return customProperties.get(HystrixPropertiesNames.HYSTRIX_PROMISE_IMPLEMENTATION);\n        }\n    }]);\n\n    return HystrixConfig;\n})();\n\nHystrixConfig.init(defaults);\n\nexports[\"default\"] = HystrixConfig;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/metrics/CounterBucket.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _RollingNumberEvent = require(\"./RollingNumberEvent\");\n\nvar _RollingNumberEvent2 = _interopRequireDefault(_RollingNumberEvent);\n\nvar CounterBucket = (function () {\n    function CounterBucket(windowStart) {\n        _classCallCheck(this, CounterBucket);\n\n        this.windowStart = windowStart;\n        this.bucketValues = {};\n    }\n\n    _createClass(CounterBucket, [{\n        key: \"get\",\n        value: function get(type) {\n            if (_RollingNumberEvent2[\"default\"][type] === undefined) {\n                throw new Error(\"invalid event\");\n            }\n\n            if (!this.bucketValues[type]) {\n                this.bucketValues[type] = 0;\n            }\n            return this.bucketValues[type];\n        }\n    }, {\n        key: \"increment\",\n        value: function increment(type) {\n            if (_RollingNumberEvent2[\"default\"][type] === undefined) {\n                throw new Error(\"invalid event\");\n            }\n\n            var value = this.bucketValues[type];\n            if (value) {\n                value = value + 1;\n                this.bucketValues[type] = value;\n            } else {\n                this.bucketValues[type] = 1;\n            }\n        }\n    }]);\n\n    return CounterBucket;\n})();\n\nexports[\"default\"] = CounterBucket;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/metrics/RollingNumberEvent.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports[\"default\"] = {\n    SUCCESS: \"SUCCESS\",\n    FAILURE: \"FAILURE\",\n    TIMEOUT: \"TIMEOUT\",\n    REJECTED: \"REJECTED\",\n    SHORT_CIRCUITED: \"SHORT_CIRCUITED\"\n};\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/metrics/RollingPercentile.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _utilActualTime = require(\"../util/ActualTime\");\n\nvar _utilActualTime2 = _interopRequireDefault(_utilActualTime);\n\nvar _utilHystrixConfig = require(\"../util/HystrixConfig\");\n\nvar _utilHystrixConfig2 = _interopRequireDefault(_utilHystrixConfig);\n\nvar _PercentileBucket = require(\"./PercentileBucket\");\n\nvar _PercentileBucket2 = _interopRequireDefault(_PercentileBucket);\n\nvar _fastStats = require(\"fast-stats\");\n\nvar RollingPercentile = (function () {\n    function RollingPercentile() {\n        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var _ref$timeInMillisecond = _ref.timeInMillisecond;\n        var timeInMillisecond = _ref$timeInMillisecond === undefined ? _utilHystrixConfig2[\"default\"].metricsPercentileWindowInMilliseconds : _ref$timeInMillisecond;\n        var _ref$numberOfBuckets = _ref.numberOfBuckets;\n        var numberOfBuckets = _ref$numberOfBuckets === undefined ? _utilHystrixConfig2[\"default\"].metricsPercentileWindowBuckets : _ref$numberOfBuckets;\n\n        _classCallCheck(this, RollingPercentile);\n\n        this.windowLength = timeInMillisecond;\n        this.numberOfBuckets = numberOfBuckets;\n        this.buckets = [];\n        this.percentileSnapshot = new PercentileSnapshot();\n    }\n\n    _createClass(RollingPercentile, [{\n        key: \"addValue\",\n        value: function addValue(value) {\n            this.getCurrentBucket().addValue(value);\n        }\n    }, {\n        key: \"getPercentile\",\n        value: function getPercentile(percentile) {\n            return this.percentileSnapshot.getPercentile(percentile);\n        }\n    }, {\n        key: \"getCurrentBucket\",\n        value: function getCurrentBucket() {\n            var currentTime = _utilActualTime2[\"default\"].getCurrentTime();\n\n            if (this.buckets.length === 0) {\n                var newBucket = new _PercentileBucket2[\"default\"](currentTime);\n                this.buckets.push(newBucket);\n                return newBucket;\n            }\n\n            var currentBucket = this.buckets[this.buckets.length - 1];\n            if (currentTime < currentBucket.windowStart + this.bucketSizeInMilliseconds) {\n                return currentBucket;\n            } else {\n                this.rollWindow(currentTime);\n                return this.getCurrentBucket();\n            }\n        }\n    }, {\n        key: \"rollWindow\",\n        value: function rollWindow(currentTime) {\n            var newBucket = new _PercentileBucket2[\"default\"](currentTime);\n            if (this.buckets.length == this.numberOfBuckets) {\n                this.buckets.shift();\n            }\n            this.percentileSnapshot = new PercentileSnapshot(this.buckets);\n            this.buckets.push(newBucket);\n        }\n    }, {\n        key: \"bucketSizeInMilliseconds\",\n        get: function get() {\n            return this.windowLength / this.numberOfBuckets;\n        }\n    }]);\n\n    return RollingPercentile;\n})();\n\nexports[\"default\"] = RollingPercentile;\n\nvar PercentileSnapshot = (function () {\n    function PercentileSnapshot() {\n        var allBuckets = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n        _classCallCheck(this, PercentileSnapshot);\n\n        this.stats = new _fastStats.Stats();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = allBuckets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var bucket = _step.value;\n\n                this.stats.push(bucket.values);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n                    _iterator[\"return\"]();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        this.mean = this.stats.amean() || 0;\n        this.p0 = this.stats.percentile(0) || 0;\n        this.p5 = this.stats.percentile(5) || 0;\n        this.p10 = this.stats.percentile(10) || 0;\n        this.p25 = this.stats.percentile(25) || 0;\n        this.p50 = this.stats.percentile(50) || 0;\n        this.p75 = this.stats.percentile(75) || 0;\n        this.p90 = this.stats.percentile(90) || 0;\n        this.p95 = this.stats.percentile(95) || 0;\n        this.p99 = this.stats.percentile(99) || 0;\n        this.p995 = this.stats.percentile(99.5) || 0;\n        this.p999 = this.stats.percentile(99.9) || 0;\n        this.p100 = this.stats.percentile(100) || 0;\n    }\n\n    _createClass(PercentileSnapshot, [{\n        key: \"getPercentile\",\n        value: function getPercentile() {\n            var percentile = arguments.length <= 0 || arguments[0] === undefined ? \"mean\" : arguments[0];\n\n            if (percentile === \"mean\") {\n                return this.mean;\n            }\n\n            switch (percentile) {\n                case 0:\n                    return this.p0;\n                case 5:\n                    return this.p5;\n                case 10:\n                    return this.p10;\n                case 25:\n                    return this.p25;\n                case 50:\n                    return this.p50;\n                case 75:\n                    return this.p75;\n                case 90:\n                    return this.p90;\n                case 95:\n                    return this.p95;\n                case 99:\n                    return this.p99;\n                case 99.5:\n                    return this.p995;\n                case 99.9:\n                    return this.p999;\n                case 100:\n                    return this.p100;\n            }\n        }\n    }]);\n\n    return PercentileSnapshot;\n})();\n\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/metrics/PercentileBucket.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _RollingNumberEvent = require(\"./RollingNumberEvent\");\n\nvar _RollingNumberEvent2 = _interopRequireDefault(_RollingNumberEvent);\n\nvar PercentileBucket = (function () {\n    function PercentileBucket(windowStart) {\n        _classCallCheck(this, PercentileBucket);\n\n        this.windowStart = windowStart;\n        this.bucketValues = [];\n    }\n\n    _createClass(PercentileBucket, [{\n        key: \"addValue\",\n        value: function addValue() {\n            var value = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n            this.bucketValues.push(value);\n        }\n    }, {\n        key: \"values\",\n        get: function get() {\n            return this.bucketValues;\n        }\n    }]);\n\n    return PercentileBucket;\n})();\n\nexports[\"default\"] = PercentileBucket;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/command/CircuitBreaker.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _utilActualTime = require(\"../util/ActualTime\");\n\nvar _utilActualTime2 = _interopRequireDefault(_utilActualTime);\n\nvar _metricsCommandMetrics = require(\"../metrics/CommandMetrics\");\n\nvar _utilHystrixConfig = require(\"../util/HystrixConfig\");\n\nvar _utilHystrixConfig2 = _interopRequireDefault(_utilHystrixConfig);\n\nvar CircuitBreaker = (function () {\n    function CircuitBreaker(_ref) {\n        var key = _ref.commandKey;\n        var group = _ref.commandGroup;\n        var _ref$circuitBreakerSleepWindowInMilliseconds = _ref.circuitBreakerSleepWindowInMilliseconds;\n        var sleep = _ref$circuitBreakerSleepWindowInMilliseconds === undefined ? _utilHystrixConfig2[\"default\"].circuitBreakerSleepWindowInMilliseconds : _ref$circuitBreakerSleepWindowInMilliseconds;\n        var _ref$circuitBreakerErrorThresholdPercentage = _ref.circuitBreakerErrorThresholdPercentage;\n        var errorThreshold = _ref$circuitBreakerErrorThresholdPercentage === undefined ? _utilHystrixConfig2[\"default\"].circuitBreakerErrorThresholdPercentage : _ref$circuitBreakerErrorThresholdPercentage;\n        var _ref$circuitBreakerRequestVolumeThreshold = _ref.circuitBreakerRequestVolumeThreshold;\n        var volumeThreshold = _ref$circuitBreakerRequestVolumeThreshold === undefined ? _utilHystrixConfig2[\"default\"].circuitBreakerRequestVolumeThreshold : _ref$circuitBreakerRequestVolumeThreshold;\n        var _ref$circuitBreakerForceClosed = _ref.circuitBreakerForceClosed;\n        var forceClosed = _ref$circuitBreakerForceClosed === undefined ? _utilHystrixConfig2[\"default\"].circuitBreakerForceClosed : _ref$circuitBreakerForceClosed;\n        var _ref$circuitBreakerForceOpened = _ref.circuitBreakerForceOpened;\n        var forceOpened = _ref$circuitBreakerForceOpened === undefined ? _utilHystrixConfig2[\"default\"].circuitBreakerForceOpened : _ref$circuitBreakerForceOpened;\n\n        _classCallCheck(this, CircuitBreaker);\n\n        this.circuitBreakerSleepWindowInMilliseconds = sleep;\n        this.commandKey = key;\n        this.commandGroup = group;\n        this.circuitBreakerRequestVolumeThresholdValue = volumeThreshold;\n        this.circuitBreakerErrorThresholdPercentage = errorThreshold;\n        this.circuitOpen = false;\n        this.circuitOpenedOrLastTestedTime = _utilActualTime2[\"default\"].getCurrentTime();\n        this.circuitBreakerForceClosed = forceClosed;\n        this.circuitBreakerForceOpened = forceOpened;\n    }\n\n    _createClass(CircuitBreaker, [{\n        key: \"allowRequest\",\n        value: function allowRequest() {\n            if (this.circuitBreakerForceOpened) {\n                return false;\n            }\n\n            if (this.circuitBreakerForceClosed) {\n                return true;\n            }\n            return !this.isOpen() || this.allowSingleTest();\n        }\n    }, {\n        key: \"allowSingleTest\",\n        value: function allowSingleTest() {\n            if (this.circuitOpen && _utilActualTime2[\"default\"].getCurrentTime() > this.circuitOpenedOrLastTestedTime + this.circuitBreakerSleepWindowInMilliseconds) {\n                this.circuitOpenedOrLastTestedTime = _utilActualTime2[\"default\"].getCurrentTime();\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: \"isOpen\",\n        value: function isOpen() {\n            if (this.circuitOpen) {\n                return true;\n            }\n\n            var _metrics$getHealthCounts = this.metrics.getHealthCounts();\n\n            var _metrics$getHealthCounts$totalCount = _metrics$getHealthCounts.totalCount;\n            var totalCount = _metrics$getHealthCounts$totalCount === undefined ? 0 : _metrics$getHealthCounts$totalCount;\n            var errorCount = _metrics$getHealthCounts.errorCount;\n            var errorPercentage = _metrics$getHealthCounts.errorPercentage;\n\n            if (totalCount < this.circuitBreakerRequestVolumeThreshold) {\n                return false;\n            }\n\n            if (errorPercentage > this.circuitBreakerErrorThresholdPercentage) {\n                this.circuitOpen = true;\n                this.circuitOpenedOrLastTestedTime = _utilActualTime2[\"default\"].getCurrentTime();\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: \"markSuccess\",\n        value: function markSuccess() {\n            if (this.circuitOpen) {\n                this.circuitOpen = false;\n                this.metrics.reset();\n            }\n        }\n    }, {\n        key: \"metrics\",\n        get: function get() {\n            return _metricsCommandMetrics.Factory.getOrCreate({ commandKey: this.commandKey });\n        }\n    }, {\n        key: \"circuitBreakerRequestVolumeThreshold\",\n        get: function get() {\n            if (_utilHystrixConfig2[\"default\"].circuitBreakerRequestVolumeThresholdForceOverride) {\n                return _utilHystrixConfig2[\"default\"].circuitBreakerRequestVolumeThresholdOverride;\n            } else {\n                return this.circuitBreakerRequestVolumeThresholdValue;\n            }\n        }\n    }]);\n\n    return CircuitBreaker;\n})();\n\nvar circuitBreakersByCommand = new Map();\n\nvar Factory = (function () {\n    function Factory() {\n        _classCallCheck(this, Factory);\n    }\n\n    _createClass(Factory, null, [{\n        key: \"getOrCreate\",\n        value: function getOrCreate() {\n            var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n            var circuitBreakerSleepWindowInMilliseconds = _ref2.circuitBreakerSleepWindowInMilliseconds;\n            var commandKey = _ref2.commandKey;\n            var circuitBreakerErrorThresholdPercentage = _ref2.circuitBreakerErrorThresholdPercentage;\n            var circuitBreakerRequestVolumeThreshold = _ref2.circuitBreakerRequestVolumeThreshold;\n            var _ref2$commandGroup = _ref2.commandGroup;\n            var commandGroup = _ref2$commandGroup === undefined ? \"hystrix\" : _ref2$commandGroup;\n            var circuitBreakerForceClosed = _ref2.circuitBreakerForceClosed;\n            var circuitBreakerForceOpened = _ref2.circuitBreakerForceOpened;\n\n            var previouslyCached = circuitBreakersByCommand.get(commandKey);\n            if (previouslyCached) {\n                return previouslyCached;\n            }\n\n            var circuitBreaker = new CircuitBreaker({\n                circuitBreakerSleepWindowInMilliseconds: circuitBreakerSleepWindowInMilliseconds,\n                commandKey: commandKey,\n                circuitBreakerErrorThresholdPercentage: circuitBreakerErrorThresholdPercentage,\n                circuitBreakerRequestVolumeThreshold: circuitBreakerRequestVolumeThreshold,\n                commandGroup: commandGroup,\n                circuitBreakerForceClosed: circuitBreakerForceClosed,\n                circuitBreakerForceOpened: circuitBreakerForceOpened\n            });\n            circuitBreakersByCommand.set(commandKey, circuitBreaker);\n            return circuitBreakersByCommand.get(commandKey);\n        }\n    }, {\n        key: \"getCache\",\n        value: function getCache() {\n            return circuitBreakersByCommand;\n        }\n    }, {\n        key: \"resetCache\",\n        value: function resetCache() {\n            circuitBreakersByCommand.clear();\n        }\n    }]);\n\n    return Factory;\n})();\n\nexports[\"default\"] = Factory;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/command/Command.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _metricsCommandMetrics = require(\"../metrics/CommandMetrics\");\n\nvar _CircuitBreaker = require(\"./CircuitBreaker\");\n\nvar _CircuitBreaker2 = _interopRequireDefault(_CircuitBreaker);\n\nvar _utilActualTime = require(\"../util/ActualTime\");\n\nvar _utilActualTime2 = _interopRequireDefault(_utilActualTime);\n\nvar _utilHystrixConfig = require(\"../util/HystrixConfig\");\n\nvar _utilHystrixConfig2 = _interopRequireDefault(_utilHystrixConfig);\n\nfunction doFinally(promise, fn) {\n    return promise.then(function (res) {\n        fn();\n        return res;\n    }, function (err) {\n        fn();\n        throw err;\n    });\n}\n\nfunction timeout(promisedValue, timeMs) {\n\n    return new _utilHystrixConfig2[\"default\"].promiseImplementation(function (resolve, reject) {\n        var timer = setTimeout(function () {\n            return reject(new Error('CommandTimeOut'));\n        }, timeMs);\n\n        return doFinally(promisedValue.then(resolve, reject), function () {\n            return clearTimeout(timer);\n        });\n    });\n}\n\nvar Command = (function () {\n    function Command(_ref) {\n        var _this = this;\n\n        var commandKey = _ref.commandKey;\n        var commandGroup = _ref.commandGroup;\n        var runContext = _ref.runContext;\n        var metricsConfig = _ref.metricsConfig;\n        var circuitConfig = _ref.circuitConfig;\n        var _ref$requestVolumeRejectionThreshold = _ref.requestVolumeRejectionThreshold;\n        var requestVolumeRejectionThreshold = _ref$requestVolumeRejectionThreshold === undefined ? _utilHystrixConfig2[\"default\"].requestVolumeRejectionThreshold : _ref$requestVolumeRejectionThreshold;\n        var _ref$timeout = _ref.timeout;\n        var timeout = _ref$timeout === undefined ? _utilHystrixConfig2[\"default\"].executionTimeoutInMilliseconds : _ref$timeout;\n        var _ref$fallback = _ref.fallback;\n        var fallback = _ref$fallback === undefined ? function (err, args) {\n            return _this.Promise.reject(err);\n        } : _ref$fallback;\n        var _ref$run = _ref.run;\n        var run = _ref$run === undefined ? function () {\n            throw new Error(\"Command must implement run method.\");\n        } : _ref$run;\n        var _ref$isErrorHandler = _ref.isErrorHandler;\n        var isErrorHandler = _ref$isErrorHandler === undefined ? function (error) {\n            return error;\n        } : _ref$isErrorHandler;\n\n        _classCallCheck(this, Command);\n\n        this.commandKey = commandKey;\n        this.commandGroup = commandGroup;\n        this.run = run;\n        this.runContext = runContext;\n        this.fallback = fallback;\n        this.timeout = timeout;\n        this.isError = isErrorHandler;\n        this.metricsConfig = metricsConfig;\n        this.circuitConfig = circuitConfig;\n        this.requestVolumeRejectionThreshold = requestVolumeRejectionThreshold;\n        this.Promise = _utilHystrixConfig2[\"default\"].promiseImplementation;\n    }\n\n    _createClass(Command, [{\n        key: \"execute\",\n        value: function execute() {\n            var _this2 = this,\n                _arguments = arguments;\n\n            //Resolve promise to guarantee execution/fallback is always deferred\n            return this.Promise.resolve().then(function () {\n                if (_this2.requestVolumeRejectionThreshold != 0 && _this2.metrics.getCurrentExecutionCount() >= _this2.requestVolumeRejectionThreshold) {\n                    return _this2.handleFailure(new Error(\"CommandRejected\"), Array.prototype.slice.call(_arguments));\n                }\n                if (_this2.circuitBreaker.allowRequest()) {\n                    return _this2.runCommand.apply(_this2, _arguments);\n                } else {\n                    _this2.metrics.markShortCircuited();\n                    return _this2.fallback(new Error(\"OpenCircuitError\"), Array.prototype.slice.call(_arguments));\n                }\n            });\n        }\n    }, {\n        key: \"runCommand\",\n        value: function runCommand() {\n            var _this3 = this,\n                _arguments2 = arguments;\n\n            this.metrics.incrementExecutionCount();\n            var start = _utilActualTime2[\"default\"].getCurrentTime();\n            var commandPromise = this.run.apply(this.runContext, arguments);\n            if (this.timeout > 0) {\n                commandPromise = timeout(commandPromise, this.timeout);\n            }\n            commandPromise = commandPromise.then(function (res) {\n                _this3.handleSuccess(start);\n                return res;\n            })[\"catch\"](function (err) {\n                return _this3.handleFailure(err, Array.prototype.slice.call(_arguments2));\n            });\n\n            return doFinally(commandPromise, function () {\n                return _this3.metrics.decrementExecutionCount();\n            });\n        }\n    }, {\n        key: \"handleSuccess\",\n        value: function handleSuccess(start) {\n            var end = _utilActualTime2[\"default\"].getCurrentTime();\n            this.metrics.addExecutionTime(end - start);\n            this.metrics.markSuccess();\n            this.circuitBreaker.markSuccess();\n        }\n    }, {\n        key: \"handleFailure\",\n        value: function handleFailure(err, args) {\n            if (this.isError(err)) {\n                if (err.message === \"CommandTimeOut\") {\n                    this.metrics.markTimeout();\n                } else if (err.message === \"CommandRejected\") {\n                    this.metrics.markRejected();\n                } else {\n                    this.metrics.markFailure();\n                }\n            }\n\n            return this.fallback(err, args);\n        }\n    }, {\n        key: \"circuitBreaker\",\n        get: function get() {\n            return _CircuitBreaker2[\"default\"].getOrCreate(this.circuitConfig);\n        }\n    }, {\n        key: \"metrics\",\n        get: function get() {\n            return _metricsCommandMetrics.Factory.getOrCreate(this.metricsConfig);\n        }\n    }]);\n\n    return Command;\n})();\n\nexports[\"default\"] = Command;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/lib/http/HystrixSSEStream.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _metricsCommandMetrics = require(\"../metrics/CommandMetrics\");\n\nvar _commandCircuitBreaker = require(\"../command/CircuitBreaker\");\n\nvar _commandCircuitBreaker2 = _interopRequireDefault(_commandCircuitBreaker);\n\nvar _rx = require(\"rx\");\n\nvar _rx2 = _interopRequireDefault(_rx);\n\nvar _utilActualTime = require(\"../util/ActualTime\");\n\nvar _utilActualTime2 = _interopRequireDefault(_utilActualTime);\n\nvar _metricsRollingNumberEvent = require(\"../metrics/RollingNumberEvent\");\n\nvar _metricsRollingNumberEvent2 = _interopRequireDefault(_metricsRollingNumberEvent);\n\nvar HystrixSSEStream = (function () {\n    function HystrixSSEStream() {\n        _classCallCheck(this, HystrixSSEStream);\n    }\n\n    _createClass(HystrixSSEStream, null, [{\n        key: \"toObservable\",\n        value: function toObservable() {\n            var observableMetrics = _rx2[\"default\"].Observable.interval(2000).flatMap(function () {\n                return _rx2[\"default\"].Observable.from(_metricsCommandMetrics.Factory.getAllMetrics());\n            }).map(function (metrics) {\n                return HystrixSSEStream.toCommandJson(metrics);\n            });\n\n            return observableMetrics;\n        }\n    }, {\n        key: \"toCommandJson\",\n        value: function toCommandJson(metrics) {\n            var json = {};\n            json.type = \"HystrixCommand\";\n            json.name = metrics.commandKey;\n            json.group = metrics.commandGroup;\n            json.currentTime = _utilActualTime2[\"default\"].getCurrentTime();\n\n            var circuitBreaker = _commandCircuitBreaker2[\"default\"].getOrCreate({ commandKey: metrics.commandKey });\n            json.isCircuitBreakerOpen = circuitBreaker.isOpen();\n\n            var _metrics$getHealthCounts = metrics.getHealthCounts();\n\n            var totalCount = _metrics$getHealthCounts.totalCount;\n            var errorCount = _metrics$getHealthCounts.errorCount;\n            var errorPercentage = _metrics$getHealthCounts.errorPercentage;\n\n            json.errorPercentage = errorPercentage;\n            json.errorCount = errorCount;\n            json.requestCount = totalCount;\n\n            json.rollingCountFailure = metrics.getRollingCount(_metricsRollingNumberEvent2[\"default\"].FAILURE);\n            json.rollingCountTimeout = metrics.getRollingCount(_metricsRollingNumberEvent2[\"default\"].TIMEOUT);\n            json.rollingCountSuccess = metrics.getRollingCount(_metricsRollingNumberEvent2[\"default\"].SUCCESS);\n            json.rollingCountShortCircuited = metrics.getRollingCount(_metricsRollingNumberEvent2[\"default\"].SHORT_CIRCUITED);\n            json.rollingCountBadRequests = json.rollingCountFailure;\n            json.rollingCountCollapsedRequests = 0;\n            json.rollingCountExceptionsThrown = 0;\n            json.rollingCountFallbackFailure = 0;\n            json.rollingCountFallbackRejection = 0;\n            json.rollingCountFallbackSuccess = 0;\n            json.rollingCountResponsesFromCache = 0;\n            json.rollingCountSemaphoreRejected = 0;\n            json.rollingCountThreadPoolRejected = 0;\n            json.currentConcurrentExecutionCount = metrics.getCurrentExecutionCount();\n\n            json.latencyExecute_mean = metrics.getExecutionTime(\"mean\") || 0;\n            json.latencyExecute = {};\n            json.latencyExecute[\"0\"] = metrics.getExecutionTime(0) || 0;\n            json.latencyExecute[\"25\"] = metrics.getExecutionTime(25) || 0;\n            json.latencyExecute[\"50\"] = metrics.getExecutionTime(50) || 0;\n            json.latencyExecute[\"75\"] = metrics.getExecutionTime(75) || 0;\n            json.latencyExecute[\"90\"] = metrics.getExecutionTime(90) || 0;\n            json.latencyExecute[\"95\"] = metrics.getExecutionTime(95) || 0;\n            json.latencyExecute[\"99\"] = metrics.getExecutionTime(99) || 0;\n            json.latencyExecute[\"99.5\"] = metrics.getExecutionTime(99.5) || 0;\n            json.latencyExecute[\"100\"] = metrics.getExecutionTime(100) || 0;\n\n            json.latencyTotal_mean = metrics.getExecutionTime(\"mean\") || 0;\n            json.latencyTotal = {};\n            json.latencyTotal[\"0\"] = metrics.getExecutionTime(0) || 0;\n            json.latencyTotal[\"25\"] = metrics.getExecutionTime(25) || 0;\n            json.latencyTotal[\"50\"] = metrics.getExecutionTime(50) || 0;\n            json.latencyTotal[\"75\"] = metrics.getExecutionTime(75) || 0;\n            json.latencyTotal[\"90\"] = metrics.getExecutionTime(90) || 0;\n            json.latencyTotal[\"95\"] = metrics.getExecutionTime(95) || 0;\n            json.latencyTotal[\"99\"] = metrics.getExecutionTime(99) || 0;\n            json.latencyTotal[\"99.5\"] = metrics.getExecutionTime(99.5) || 0;\n            json.latencyTotal[\"100\"] = metrics.getExecutionTime(100) || 0;\n\n            json.propertyValue_circuitBreakerRequestVolumeThreshold = circuitBreaker.circuitBreakerRequestVolumeThreshold;\n            json.propertyValue_circuitBreakerSleepWindowInMilliseconds = circuitBreaker.circuitBreakerSleepWindowInMilliseconds;\n            json.propertyValue_circuitBreakerErrorThresholdPercentage = circuitBreaker.circuitBreakerErrorThresholdPercentage;\n            json.propertyValue_circuitBreakerForceOpen = false;\n            json.propertyValue_circuitBreakerForceClosed = false;\n            json.propertyValue_circuitBreakerEnabled = true;\n\n            json.propertyValue_metricsRollingStatisticalWindowInMilliseconds = metrics.metricsRollingStatisticalWindowInMilliseconds;\n\n            json.propertyValue_executionIsolationStrategy = \"THREAD\";\n            json.propertyValue_executionIsolationStrategy = 'unknown';\n            json.propertyValue_executionIsolationThreadTimeoutInMilliseconds = 0;\n            json.propertyValue_executionIsolationThreadInterruptOnTimeout = 0;\n            json.propertyValue_executionIsolationThreadPoolKeyOverride = false;\n            json.propertyValue_executionIsolationSemaphoreMaxConcurrentRequests = 0;\n            json.propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests = 0;\n\n            json.propertyValue_requestCacheEnabled = false;\n            json.propertyValue_requestLogEnabled = true;\n\n            json.reportingHosts = 1;\n\n            return JSON.stringify(json);\n        }\n    }]);\n\n    return HystrixSSEStream;\n})();\n\nexports[\"default\"] = HystrixSSEStream;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-hystrixjs/node_modules/hystrixjs/gulpfile.js":"var gulp = require('gulp');\nvar babel = require('gulp-babel');\nvar plumber = require('gulp-plumber');\nvar jasmine = require('gulp-jasmine');\nvar bump = require('gulp-bump');\nvar git = require('gulp-git');\n\nvar path = require('path');\n\nvar paths = {\n    es6: ['src/**/*.js'],\n    es5: 'lib'\n};\n\ngulp.task('babel', function (cb) {\n    gulp.src(paths.es6)\n        .pipe(plumber())\n        .pipe(babel())\n        .pipe(gulp.dest(paths.es5));\n    cb();\n});\n\ngulp.task('test', function () {\n    return gulp.src('test/**/*.spec.js')\n        .pipe(jasmine({\n            verbose:true,\n            includeStackTrace:true\n        })\n    );\n});\n\ngulp.task('watch', function() {\n    gulp.watch(paths.es6, ['babel']);\n    gulp.watch(['test/**/*','lib/**/*'], ['test']);\n});\n\ngulp.task('bump', function () {\n    return gulp.src(['./package.json'])\n        .pipe(bump())\n        .pipe(gulp.dest('./'));\n});\n\ngulp.task('tag', ['bump'], function () {\n    var pkg = require('./package.json');\n    var v = 'v' + pkg.version;\n    var message = 'Release ' + v;\n\n    return gulp.src('./')\n        .pipe(git.commit(message))\n        .pipe(git.tag(v, message))\n        .pipe(git.push('origin', 'master', '--tags'))\n        .pipe(gulp.dest('./'));\n});\n\ngulp.task('npm', ['tag'], function (done) {\n    require('child_process').spawn('npm', ['publish'], { stdio: 'inherit' })\n        .on('close', done);\n});\n\ngulp.task('default', ['watch']);"}